# run_simulation.pyimport argparsefrom engine.simulator import (    monte_carlo_throughput,    monte_carlo_delivery_date,    calculate_percentile_summary,    probability_of_value_or_less,)def main():    parser = argparse.ArgumentParser(description="Monte Carlo Simulation CLI")    parser.add_argument("--mode", choices=["throughput", "delivery"], required=True,                        help="Simulation mode: 'throughput' or 'delivery'")    parser.add_argument("--cycle-times", nargs="+", type=int, required=True,                        help="List of historical cycle times (e.g., 3 4 5 6)")    parser.add_argument("--days", type=int, help="Number of days for throughput simulation")    parser.add_argument("--items", type=int, help="Number of items for delivery date simulation")    parser.add_argument("--simulations", type=int, default=1000, help="Number of simulation runs")    parser.add_argument("--probability-for", type=int, help="Value to calculate probability for")    args = parser.parse_args()    if args.mode == "throughput":        if not args.days:            parser.error("--days is required for throughput mode")        results = monte_carlo_throughput(args.cycle_times, args.days, args.simulations)        summary = calculate_percentile_summary(results)        print("\n Throughput Simulation Summary:")        for k, v in summary.items():            print(f"  {k}: {round(v, 2)} items")        if args.probability_for:            prob = probability_of_value_or_less(results, args.probability_for)            print(f"\n Probability of delivering >= {args.probability_for} items in {args.days} days: {prob}%")    elif args.mode == "delivery":        if not args.items:            parser.error("--items is required for delivery mode")        results = monte_carlo_delivery_date(args.cycle_times, args.items, args.simulations)        summary = calculate_percentile_summary(results)        print("\n Delivery Date Simulation Summary:")        for k, v in summary.items():            print(f"  {k}: {round(v, 2)} days")        if args.probability_for:            prob = probability_of_value_or_less(results, args.probability_for)            print(f"\nðŸ”¢ Probability of completing {args.items} items in â‰¤ {args.probability_for} days: {prob}%")if __name__ == "__main__":    main()